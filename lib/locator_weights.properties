# Locates a button used in a form, matching on the button's text.
# examples:
#     css selector: input[value='push me']
#     xpath: descendant::input[@value="push me"]
button_text_locator.css=.99
button_text_locator.xpath=.99

# Locates an element by its text content.  Builds a "link text" or
# "partial link text" locator for a hyperlink, otherwise builds an "xpath"
# locator.
# examples:
#     link text: click me
#     partial link text: click
#     xpath: descendant::div[normalize-space(.)="The quick brown fox"]
text_locator.link_text=.98
text_locator.partial_link_text=.98
text_locator.xpath=.98

# Locates an element by its "id" attribute.  Builds an "id" locator.
# Builds "xpath" and "css selector" locators for substring matches.
# examples:
#     id: foo
#     css selector: [id^='foo']
#     xpath: descendant::*[starts-with(@id, "foo")]
id_locator.id=.97
id_locator.xpath=.97
id_locator.css=.97

# Locates an element by its "name" attribute.  Builds a "name" locator.
# Builds "xpath" and "css selector" locators for substring matches.
# examples:
#     name: foo
#     css selector: [name$='foo']
#     xpath: descendant::*[ends-with(@name, "foo")]
name_locator.name=.96
name_locator.xpath=.96
name_locator.css=.96

# Locates an input by creating an XPath (css not supported) using a label that is
# associated with that input
# examples:
#   1.) <input> anywhere on the page and label has for="inputId" attribute
#       xpath: //input[@id=//label[normalize-space()="User Name"]/@for]
#   2.) <input> as the following-sibling of the <label>
#       xpath: //label[normalize-space()="User Name"]/following-sibling::input
#   3.) only one <input> sibling of the <label> but not necessarily following
#       xpath: //*[label[normalize-space()="User Name"]]/input
#   4.) <input> as a child element inside the <label>
#       xpath: //label[normalize-space()="User Name"]/input
input_label_locator.xpath=.96

# Locates an element by its "class" attribute.  Builds a "class name" locator.
# Builds "xpath" and "css selector" locators for substring matches.
# examples:
#     class name: some-class
#     css selector: [class*='foo']
#     xpath: descendant::*[contains(@class, "foo")]
class_locator.class_name=.95
class_locator.css=.95
class_locator.xpath=.95

# Locates an element in a table.  The row and column are identified by some
# unique criteria, falling back on indices.
# examples:
#     xpath: //table/tbody/tr[td[1][normalize-space()=\"Phone #:\"]]/td[2]/input
table_locator.xpath=.94

# Locates a hyperlink that contains an image with a particular "alt" attribute.
# examples:
#    xpath: descendant::a[img/@alt="logo"]
link_image_locator.xpath=.93

# Locates an element by matching one or more attributes in the following order:
#     id, name, value, type, action, title, class
# If the element cannot be uniquely identified by any single attribute,
# also matches on the tag name and two or more attributes.
# examples:
#     css selector: button[value='foo'][title='bar']
#     xpath: descendant::button[@value="foo" and @title="bar"]
attribute_locator.css=.92
attribute_locator.xpath=.92

# Locates an element by using an ancestor element as the context and creating a 
# compound locator. The locator that is created could be a combination of locators
# for multiple ancestor elements
#   css selector: .parent-class .child-class
#   xpath : /descendant::*[@title='Save']/descendant::span[normalize-space(.)='Save']"
#
# This strategy increases analysis time for recommendations. Uncomment to enable.
#
#parent_locator.xpath=.9
#parent_locator.css=.9

# Locates an element by its position in the document.
# examples:
#     tag name: input
#     css selector: div:first-of-type > input:nth-of-type(2)
#     xpath: //div[1]/input[2]
position_locator.tag_name=.5
position_locator.css=.5
position_locator.xpath=.5
